// Generated by gencpp from file mrobot_simple_nav/sys_states_all.msg
// DO NOT EDIT!


#ifndef MROBOT_SIMPLE_NAV_MESSAGE_SYS_STATES_ALL_H
#define MROBOT_SIMPLE_NAV_MESSAGE_SYS_STATES_ALL_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace mrobot_simple_nav
{
template <class ContainerAllocator>
struct sys_states_all_
{
  typedef sys_states_all_<ContainerAllocator> Type;

  sys_states_all_()
    : state0(0)
    , state1(0)
    , state2(0)
    , state3(0)
    , state4(0)
    , state5(0)
    , state6(0)
    , state7(0)
    , state8(0)
    , state9(0)  {
    }
  sys_states_all_(const ContainerAllocator& _alloc)
    : state0(0)
    , state1(0)
    , state2(0)
    , state3(0)
    , state4(0)
    , state5(0)
    , state6(0)
    , state7(0)
    , state8(0)
    , state9(0)  {
  (void)_alloc;
    }



   typedef uint16_t _state0_type;
  _state0_type state0;

   typedef uint16_t _state1_type;
  _state1_type state1;

   typedef uint16_t _state2_type;
  _state2_type state2;

   typedef uint16_t _state3_type;
  _state3_type state3;

   typedef uint16_t _state4_type;
  _state4_type state4;

   typedef uint16_t _state5_type;
  _state5_type state5;

   typedef uint16_t _state6_type;
  _state6_type state6;

   typedef uint16_t _state7_type;
  _state7_type state7;

   typedef uint16_t _state8_type;
  _state8_type state8;

   typedef uint16_t _state9_type;
  _state9_type state9;





  typedef boost::shared_ptr< ::mrobot_simple_nav::sys_states_all_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::mrobot_simple_nav::sys_states_all_<ContainerAllocator> const> ConstPtr;

}; // struct sys_states_all_

typedef ::mrobot_simple_nav::sys_states_all_<std::allocator<void> > sys_states_all;

typedef boost::shared_ptr< ::mrobot_simple_nav::sys_states_all > sys_states_allPtr;
typedef boost::shared_ptr< ::mrobot_simple_nav::sys_states_all const> sys_states_allConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::mrobot_simple_nav::sys_states_all_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::mrobot_simple_nav::sys_states_all_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::mrobot_simple_nav::sys_states_all_<ContainerAllocator1> & lhs, const ::mrobot_simple_nav::sys_states_all_<ContainerAllocator2> & rhs)
{
  return lhs.state0 == rhs.state0 &&
    lhs.state1 == rhs.state1 &&
    lhs.state2 == rhs.state2 &&
    lhs.state3 == rhs.state3 &&
    lhs.state4 == rhs.state4 &&
    lhs.state5 == rhs.state5 &&
    lhs.state6 == rhs.state6 &&
    lhs.state7 == rhs.state7 &&
    lhs.state8 == rhs.state8 &&
    lhs.state9 == rhs.state9;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::mrobot_simple_nav::sys_states_all_<ContainerAllocator1> & lhs, const ::mrobot_simple_nav::sys_states_all_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace mrobot_simple_nav

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::mrobot_simple_nav::sys_states_all_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::mrobot_simple_nav::sys_states_all_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::mrobot_simple_nav::sys_states_all_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::mrobot_simple_nav::sys_states_all_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::mrobot_simple_nav::sys_states_all_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::mrobot_simple_nav::sys_states_all_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::mrobot_simple_nav::sys_states_all_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ab72e9030bcb1f212660ed0a7e4c9066";
  }

  static const char* value(const ::mrobot_simple_nav::sys_states_all_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xab72e9030bcb1f21ULL;
  static const uint64_t static_value2 = 0x2660ed0a7e4c9066ULL;
};

template<class ContainerAllocator>
struct DataType< ::mrobot_simple_nav::sys_states_all_<ContainerAllocator> >
{
  static const char* value()
  {
    return "mrobot_simple_nav/sys_states_all";
  }

  static const char* value(const ::mrobot_simple_nav::sys_states_all_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::mrobot_simple_nav::sys_states_all_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uint16 state0\n"
"uint16 state1\n"
"uint16 state2\n"
"uint16 state3\n"
"uint16 state4\n"
"uint16 state5\n"
"uint16 state6\n"
"uint16 state7\n"
"uint16 state8\n"
"uint16 state9\n"
;
  }

  static const char* value(const ::mrobot_simple_nav::sys_states_all_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::mrobot_simple_nav::sys_states_all_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.state0);
      stream.next(m.state1);
      stream.next(m.state2);
      stream.next(m.state3);
      stream.next(m.state4);
      stream.next(m.state5);
      stream.next(m.state6);
      stream.next(m.state7);
      stream.next(m.state8);
      stream.next(m.state9);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct sys_states_all_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::mrobot_simple_nav::sys_states_all_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::mrobot_simple_nav::sys_states_all_<ContainerAllocator>& v)
  {
    s << indent << "state0: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.state0);
    s << indent << "state1: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.state1);
    s << indent << "state2: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.state2);
    s << indent << "state3: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.state3);
    s << indent << "state4: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.state4);
    s << indent << "state5: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.state5);
    s << indent << "state6: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.state6);
    s << indent << "state7: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.state7);
    s << indent << "state8: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.state8);
    s << indent << "state9: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.state9);
  }
};

} // namespace message_operations
} // namespace ros

#endif // MROBOT_SIMPLE_NAV_MESSAGE_SYS_STATES_ALL_H
